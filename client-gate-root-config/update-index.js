const fs = require("fs");
const path = require("path");

function updateIndexHtml() {
  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c build output c·ªßa root-config
  const buildDir = path.resolve(
    __dirname,
    "..",
    "deployment-app",
    "public",
    "smit-gate-root-config"
  );

  // ƒê∆∞·ªùng d·∫´n file index.html template t·ª´ root-config build
  const templatePath = path.resolve(buildDir, "index.html");

  // ƒê∆∞·ªùng d·∫´n file index.html s·∫Ω ƒë∆∞·ª£c t·∫°o
  const outputPath = path.resolve(
    __dirname,
    "..",
    "deployment-app",
    "public",
    "index.html"
  );

  console.log("üîç ƒêang t√¨m c√°c file JS trong:", buildDir);

  try {
    // Ki·ªÉm tra th∆∞ m·ª•c build c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(buildDir)) {
      console.error("‚ùå Th∆∞ m·ª•c build kh√¥ng t·ªìn t·∫°i:", buildDir);
      return;
    }

    // Ki·ªÉm tra file template c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(templatePath)) {
      console.error("‚ùå File template index.html kh√¥ng t·ªìn t·∫°i:", templatePath);
      return;
    }

    // ƒê·ªçc file template HTML ho√†n ch·ªânh
    let htmlContent = fs.readFileSync(templatePath, "utf8");
    console.log("üìÑ ƒê√£ ƒë·ªçc template HTML t·ª´:", templatePath);

    // ƒê·ªçc t·∫•t c·∫£ file trong th∆∞ m·ª•c build
    const files = fs.readdirSync(buildDir);

    // L·ªçc v√† s·∫Øp x·∫øp c√°c file .js
    const jsFiles = files
      .filter((file) => file.endsWith(".bundle.js"))
      .sort((a, b) => {
        // S·∫Øp x·∫øp: main.js cu·ªëi c√πng, c√°c file kh√°c theo s·ªë
        if (a.startsWith("main.")) return 1;
        if (b.startsWith("main.")) return -1;

        const numA = parseInt(a.split(".")[0]) || 0;
        const numB = parseInt(b.split(".")[0]) || 0;
        return numA - numB;
      });

    console.log("üìù T√¨m th·∫•y c√°c file JS:", jsFiles);

    // Lo·∫°i b·ªè c√°c script tags c≈© (c√°c file .bundle.js)
    htmlContent = htmlContent.replace(
      /<script[^>]*src="[^"]*\.bundle\.js"[^>]*><\/script>/g,
      ""
    );

    // T·∫°o c√°c th·∫ª script m·ªõi v·ªõi ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
    const scriptTags = jsFiles
      .map(
        (file) =>
          `<script defer="defer" src="./smit-gate-root-config/${file}"></script>`
      )
      .join("");

    // Ch√®n script tags v√†o tr∆∞·ªõc tag </head>
    if (htmlContent.includes("</head>")) {
      htmlContent = htmlContent.replace("</head>", `${scriptTags}</head>`);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tag </head>, th√™m script v√†o cu·ªëi file");
      htmlContent += scriptTags;
    }

    // Ghi file index.html m·ªõi
    fs.writeFileSync(outputPath, htmlContent, "utf8");
    console.log("‚úÖ ƒê√£ t·∫°o file index.html t·∫°i:", outputPath);
    console.log("üìÑ Script tags ƒë√£ th√™m:", jsFiles.length);
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t index.html:", error.message);
  }
}

module.exports = updateIndexHtml;
